module class Forty(gameType:FFA|Teams);
import {sqrt,sin,cos,atan2,max,min,PI,mid,Infinity} from Math;
import {randomReal} from Random;
import {Set} from DataStructre;
import {assert} from Assert;
import {Refence,with} from SiyuanMagic;

FFA:{};
Teams:{teamCount:Int};

PlayerProp:{
	maxSpeed:Real=60;
	acc:Real=200;
	maxHealth:Real=100;
	attack:{
		range:Real=40;
		angle:Real=PI/6;
		damage:Real=40;
		prepareTime:Real=0.8;
		cooldownTime:Real=0;
		auto:false,
	};
	bloodSucking:Real=0.4;
	defense:Real=0;
	hurtRate:Real=100;
	killSteal:Real=0.5;
	killScore:Real=100;
};
defaultProp:PlayerProp;

Effect:{
	apply(playerProp:Refence<PlayerProp>);
	time:Real=Infinity;
};
makeEffect<apply:Refence<PlayerProp>=>()>:Effect in{
	apply(playerProp:Refence<PlayerProp>){
		with(playerProp,apply);
	}
	time:Real=Infinity;
};
Poet:makeEffect{
	bloodSucking*=2;
};
Knive:makeEffect{
	with(attack){
		range*=0.75;
		prepareTime-=0.4;
	}
};
Broadsward:makeEffect{
	with(attack){
		range*=1.5;
		prepareTime+=1.2;
		cooldownTime+=1.5;
		damage*=2;
		angle*=1.5;
	};
	defense+=0.2;
};
Furnace:makeEffect{
	maxSpeed+=10;
	bloodSucking*=1.25;
	with(attack){
		range*=0.75;
		angle=PI;
		damage*=0.4;
		prepareTime+=1.2;
		auto=true;
	}
};

ARENA_HEIGHT:Real=1000;
ARENA_WIDTH:Real=1000;

V:{
	x:Real;
	y:Real;
};
V{x1,y1}.+V{x2,y2}=V{x1+x2,y1+y2};
V{x1,y1}.-V{x2,y2}=V{x1-x2,y1-y2};
V{x,y}.*(a:Real)=V{x*a,y*a};
V{x,y}./(a:Real)=V{x*a,y*a};
V{x,y}.len:Real=sqrt(x*x+y*y);
//atan2(x:Real,y:Real):Real;(>=0 <2*PI)
V{x,y}.angle:Real=atan2(x,y);
angleToV(angle:Real):V=V{cos(angle),sin(angle)};

Waiting:{};
BeforeAttack:{
	time:Real;
	angle:Real;
};
AfterAttack:{
	time:Real;
};

players:Set<Player>;

Player:{
	pos:V;
	speed:V;
	targetSpeed:V;
	facing:V;
	attackState:Waiting|BeforeAttack;
	health:Real;
	targetHealth:Real;
	lastDamager:Player|null;
	effects:Effect[];
	prop:PlayerProp;
	score:Real;
	teamID:String;
	startAttack(angle:Real){
		assert(attackState is Waiting);
		attackState=BeforeAttack{prop.attack.prepareTime,angle};
	}
	startMove(newTargetSpeed:V){
		if(newTargetSpeed isnot V{0,0}){
			newTargetSpeed*=prop.maxSpeed/newTargetSpeed.len;
		}
		targetSpeed=newTargetSpeed;
	}
	canDamage(p:Player)=p.teamID isnot teamID;
	canAttackReach(p:Player):Boolean{
		dis:V=p.pos-pos;
		if(dis.len is 0||dis.len>prop.attack.angle){
			return false;
		}
		delta:Real=dis.angle-attackState.angle;
		if(delta<0){
			delta+=2*PI;
		}
		return delta<=prop.attack.angle||delta>=2*PI-prop.attack.angle;
	}
	move(t:Real){
		deltaSpeed:V=targetSpeed-speed;
		dl:Real=deltaSpeed.len;
		p:Real=min(dl/prop.acc,t);
		pos+=speed*p/2;
		if(deltaSpeed isnot V{0,0}){
			speed+=p*prop.acc*deltaSpeed/deltaSpeed.len;
		}
		pos+=speed*(t-p/2);
		pos.x=mid(0,pos.x,ARENA_WIDTH);
		pos.y=mid(0,pos.y,ARENA_HEIGHT);
		if(speed isnot V{0,0}){
			facing=speed/speed.len;
		}
	}
	dealDamage(target:Player,value:Real){
		damage:Real=max((1-target.prop.defense)*value,0);
		target.targetHealth-=damage;
		target.lastDamager=$;
		targetHealth+=damage*prop.bloodSucking;
		targetHealth=min(targetHealth,prop.maxHealth);
	}
	attack{
		for(player:Player in players){
			if(canDamage(player)&&canAttackReach(player)){
				dealDamage(player,prop.attack.damage);
			}
		}
	}
	updateEffect{
		prop=defaultProp;
		for(effect:Effect in effects){
			effect.apply(prop);
		}
	}
	time(t:Real){
		move(t);

		attackTime:Real=t;
		updateAttackState<attackStateType>(done:()=>()){
			if(attackState is attackStateType){
				if(attackState.time<=attackTime){
					attackTime-=min(attackState.time,0);
					done;
				}
				else{
					attackState.time-=attackTime;
					attackTime=0;
				}
			}
		};
		do{
			updateAttackState<BeforeAttack>{
				attack;
				attackState=AfterAttack{prop.attack.cooldownTime};
			};
			updateAttackState<AfterAttack>{
				attackState=Waiting;
			}
			if(attackState is Waiting){
				if(prop.attack.auto){
					attackState=BeforeAttack{prop.attack.prepareTime,facing};
				}
				else{
					break;
				}
			}
		}while(attackTime>0);

		health=max(targetHealth,health-prop.hurtRate*t);

		// TODO: effect expire
	}
};

getDirection:Int=>v=[
	-1=>V{0,0};
	i:Int=>angleToV(i*PI/4);
];

Interface:{
	attack:()=>();
	setDirection:Int=>();
};

join(id:String):Interface{
	player:Player=Player{
		pos:V{randomReal(0,ARENA_WIDTH),randomReal(0,ARENA_HEIGHT)};
		speed:V{0,0};
		targetSpeed:V{0,0};
		attackState:Waiting;
		health:PLAYER_MAX_HEALTH;
		targetHealth:PLAYER_MAX_HEALTH;
		score:0;
		teamID:gameType is FFA?id:(():String=>{
			count:Int[gameType.teamCount];
			count.fill(0);
			players.forEach(player:Player=>{
				count[player.teamID.number]+=1;
			});
			return count.minIndex.string;
		})();
		facing:angleToV(randomReal(0,2*PI));
		effects:[],
	};
	players.insert(player);
	return Interface{
		attack:()=>player.attack;
		setDirection:i:Int=>player.move(getDirection(i));
	};
}

time(t:Real){
	for(player:Player in players){
		player.time(t);
	}
	for(player:Player in players){
		if(player.health<0){
			if(player.lastDamager in players){
				player.lastDamager.score+=player.score*PLAYER_KILL_STEAL+PLAYER_KILL_SCORE;
			}
			player.score=0;
		}
	}
	players=players.filter(player:Player=>player.health>0);
}
